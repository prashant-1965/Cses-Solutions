import java.io.*;
 
public class Main {
    static final FastScanner sc = new FastScanner();
    static final PrintWriter out = new PrintWriter(System.out);
    static final int MOD = (int)1e9 + 7;
 
    public static Integer[][] dp;
 
    public static int[] nums;
    public static int size;
 
    public static int[] nums2;
    public static int size2;
 
    public static int ans=0;
    public static int k;
 
    public static StringBuilder sb;
 
 
    public static void main(String[] args) throws Exception {
        solve();
        out.flush();
    }
    public static void solve() throws IOException {
        size = sc.nextInt();
        char[][] arr = new char[size][size];
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                arr[i][j] = sc.nextChar();
            }
        }
        int[][] dp = new int[size+1][size+1];
        dp[1][0] = 1;
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                if(arr[i-1][j-1]=='*'){
                    dp[i][j] = -1;
                }else {
                    if(dp[i - 1][j]==-1 || dp[i][j - 1]==-1){
                        dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
                    }else{
                        dp[i][j] = (dp[i - 1][j] + dp[i][j - 1])%MOD;
                    }
                }
            }
        }
        int ans = dp[size][size];
        out.println(ans==-1?0:ans);
    }
    static final class FastScanner {
        private final byte[] buf = new byte[1 << 16];
        private int len, ptr;
        private final InputStream in = System.in;
 
        private final char[] tok = new char[1 << 16];
        private int tokLen;
 
        private int readByte() throws IOException {
            if (ptr >= len) {
                len = in.read(buf);
                ptr = 0;
                if (len <= 0) return -1;
            }
            return buf[ptr++];
        }
 
        int nextInt() throws IOException {
            int c, sign = 1, val = 0;
            do { c = readByte(); } while (c <= 32 && c != -1);
            if (c == '-') { sign = -1; c = readByte(); }
            while (c > 32 && c != -1) {
                val = val * 10 + (c - '0');
                c = readByte();
            }
            return val * sign;
        }
 
        String nextLine() throws IOException {
            int c = readByte();
            while (c == '\n' || c == '\r') c = readByte();
            StringBuilder sb = new StringBuilder();
            while (c != '\n' && c != '\r' && c != -1) {
                sb.append((char) c);
                c = readByte();
            }
            return sb.toString();
        }
 
        char nextChar() throws IOException {
            int c = readByte();
            while (c <= 32 && c != -1) c = readByte();
            return (char) c;
        }
 
        private void loadToken() throws IOException {
            tokLen = 0;
            int c = readByte();
            while (c <= 32 && c != -1) c = readByte();
            while (c > 32 && c != -1) {
                tok[tokLen++] = (char) c;
                c = readByte();
            }
        }
 
        char nextCharAt(int idx) throws IOException {
            loadToken();
            if (idx < 0 || idx >= tokLen) throw new IndexOutOfBoundsException();
            return tok[idx];
        }
        int currentTokenLength() { return tokLen; }
    }
}