import java.util.*;
import java.lang.*;
 
public class Main {
    static final int MOD = (int)1e9 + 7;
    public static void main(String[] args) {
        solve();
    }
//    Optimised II for k<=10^6
    public static void solve(){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int k = sc.nextInt();
        int[] nums = new int[size];
        for(int i=0;i<size;i++){
            nums[i] = sc.nextInt();
        }
        int[] dp = new int[k+1];
        dp[0]=0;
        for(int i=1;i<=k;i++){
            dp[i] = Integer.MAX_VALUE;
            for(int j=0;j<size;j++){
                if(i-nums[j]>=0 && dp[i - nums[j]] != Integer.MAX_VALUE){
                    dp[i] = Math.min(dp[i],dp[i-nums[j]]+1);
                }
            }
        }
        System.out.println(dp[k]==Integer.MAX_VALUE?-1:dp[k]);
    }
 
//    Optimised I for k<=10^3
//    public static void solve(){
//        Scanner sc = new Scanner(System.in);
//        int size = sc.nextInt();
//        int k = sc.nextInt();
//        int[] nums = new int[size];
//        for(int i=0;i<size;i++){
//            nums[i] = sc.nextInt();
//        }
//        Integer[][] dp = new Integer[size][k+1];
//        System.out.println(dfs(0,nums,k,dp));
//    }
//    public static int dfs(int idx, int[] nums, int k, Integer[][] dp){
//        if(k==0) return 0;
//        if(idx==nums.length || k<0) return Integer.MAX_VALUE;
//        if(dp[idx][k]!=null) return dp[idx][k];
//        int take = dfs(idx,nums,k-nums[idx],dp);
//        if(take!=Integer.MAX_VALUE){
//            take+=1;
//        }
//        return dp[idx][k] =  Math.min(take,dfs(idx+1,nums,k,dp));
//    }
 
//    Brute Force  for input 2^k<500
//    public static void solve(){
//        Scanner sc = new Scanner(System.in);
//        int size = sc.nextInt();
//        int k = sc.nextInt();
//        int[] nums = new int[size];
//        for(int i=0;i<size;i++){
//            nums[i] = sc.nextInt();
//        }
//        System.out.println(dfs(0,nums,k));
//    }
//    public static int dfs(int idx, int[] nums, int k){
//        if(k==0) return 0;
//        if(idx==nums.length || k<0) return Integer.MAX_VALUE;
//        int take = dfs(idx,nums,k-nums[idx]);
//        if(take!=Integer.MAX_VALUE){
//            take+=1;
//        }
//        return Math.min(take,dfs(idx+1,nums,k));
//    }
}
