import java.io.*;
import java.util.*;
 
public class Main {
    static final FastScanner sc = new FastScanner();
    static final PrintWriter out = new PrintWriter(System.out);
 
    public static Integer[] dp;
    public static int[] nums;
    public static Integer[] arr;
    public static int[] nums2;
 
    static final int MOD = (int)1e9 + 7;
    public static int size;
    public static int size2;
    public static int ans=0;
    public static int k;
    public static int tc;
    public static int low;
    public static int high;
    public static int temp;
    public static int min;
    public static int max;
    public static int sum;
    public static boolean flag;
 
    public static StringBuilder sb;
    public static List<Integer> lt;
    public static Set<Integer> set;
    public static Map<Integer,Integer> map;
    public static PriorityQueue<Integer> pq;
 
 
    public static void main(String[] args) throws Exception {
        solve();
        out.flush();
    }
    public static void solve() throws IOException {
        size = sc.nextInt();
        nums=  new int[size];
        for(int i=0;i<size;i++)nums[i]=sc.nextInt();
        nums2 = new int[size+1];
        for(int i:nums){
            if(nums2[i-1]!=0){
                nums2[i]=nums2[i-1];
            }else{
                nums2[i] = i;
            }
        }
        set = new HashSet<>();
        ans=-1;
        for(int i:nums2){
            if(!set.contains(i)){
                ans++;
                set.add(i);
            }
        }
        out.println(ans);
 
    }
 
    private static void updateDfs(int idx, int low, int high, int key, int val) {
        if (key < low || key > high) return;
        if(low==high) {
            dp[idx] = val;
            return;
        }
        int mid = (low+high)/2;
        updateDfs(idx*2+1,low,mid,key,val);
        updateDfs(idx*2+2,mid+1,high,key,val);
        dp[idx] = Math.min(dp[idx*2+1],dp[idx*2]+2);
    }
 
    public static void dfsCreation(int low, int high, int idx){
        if(low==high) {
            dp[idx] = nums[low];
            return;
        }
        int mid = (low+high)/2;
        dfsCreation(low,mid,idx*2+1);
        dfsCreation(mid+1,high,idx*2+2);
        dp[idx] = Math.min(dp[idx*2+1],dp[idx*2+2]);
    }
    public static int findMin(int idx, int low, int high, int left, int right){
        if(high < left || low >right) return Integer.MAX_VALUE;
        if(low >=left &&high <=right) return dp[idx];
        int mid = (low + high)/2;
        return Math.min(findMin(idx*2+1, low,mid,left,right),findMin(idx*2+2,mid+1, high,left,right));
    }
 
    static final class FastScanner {
        private final byte[] buf = new byte[1 << 16];
        private int len, ptr;
        private final InputStream in = System.in;
 
        private final char[] tok = new char[1 << 16];
        private int tokLen;
 
        private int readByte() throws IOException {
            if (ptr >= len) {
                len = in.read(buf);
                ptr = 0;
                if (len <= 0) return -1;
            }
            return buf[ptr++];
        }
 
        int nextInt() throws IOException {
            int c, sign = 1, val = 0;
            do { c = readByte(); } while (c <= 32 && c != -1);
            if (c == '-') { sign = -1; c = readByte(); }
            while (c > 32 && c != -1) {
                val = val * 10 + (c - '0');
                c = readByte();
            }
            return val * sign;
        }
 
        String nextLine() throws IOException {
            int c = readByte();
            while (c == '\n' || c == '\r') c = readByte();
            StringBuilder sb = new StringBuilder();
            while (c != '\n' && c != '\r' && c != -1) {
                sb.append((char) c);
                c = readByte();
            }
            return sb.toString();
        }
 
        long nextLong() throws IOException {
            int c; long sign = 1, val = 0;
            do { c = readByte(); } while (c <= 32 && c != -1);
            if (c == '-') { sign = -1; c = readByte(); }
            while (c > 32 && c != -1) {
                val = val * 10 + (c - '0');
                c = readByte();
            }
            return val * sign;
        }
 
        char nextChar() throws IOException {
            int c = readByte();
            while (c <= 32 && c != -1) c = readByte();
            return (char) c;
        }
 
        private void loadToken() throws IOException {
            tokLen = 0;
            int c = readByte();
            while (c <= 32 && c != -1) c = readByte();
            while (c > 32 && c != -1) {
                tok[tokLen++] = (char) c;
                c = readByte();
            }
        }
 
        char nextCharAt(int idx) throws IOException {
            loadToken();
            if (idx < 0 || idx >= tokLen) throw new IndexOutOfBoundsException();
            return tok[idx];
        }
        int currentTokenLength() { return tokLen; }
    }
}